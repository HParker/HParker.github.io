<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HParker</title><link>https://www.hparker.xyz/</link><description>Recent content on HParker</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://www.hparker.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://www.hparker.xyz/art/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/art/</guid><description>&lt;h1 id="art">Art&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/roadrunner.png" alt="RoadRunner">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/pigeon.gif" alt="Pigeon in GB colors">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/spaceman-animation.gif" alt="Spaceman walking">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/me.png" alt="Self Portrait">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/otter.png" alt="otter">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/birb.png" alt="bird with goofy wings">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/alex.png" alt="Alex">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/brody.png" alt="brody">&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/domo.png" alt="domo">&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/bf3d/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/bf3d/</guid><description>&lt;h1 id="bf3d">BF3D&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/filled-cube-code.png" alt="colorful filled cube showing bf3d code in front of it">&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=bzHA7UIkmOs">Demo Video&lt;/a> | &lt;a href="">Code Pending..&lt;/a>&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/bzHA7UIkmOs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
_Video depicting a Bf3d program running as it fills in a diamond shaped 3d shape on the screen_
&lt;p>Bf3d is a simple esoteric programming language inspired by BrainFuck and like languages. Bf3d uses the same basic syntax as BrainFuck, but replaces &lt;code>+&lt;/code> and &lt;code>-&lt;/code> with &lt;code>R&lt;/code> &lt;code>G&lt;/code> and &lt;code>B&lt;/code> which increment colors and &lt;code>r&lt;/code> &lt;code>g&lt;/code> &lt;code>b&lt;/code> to decrement a color. Also, because the program works in 3 dimensions, the program can move the cursor left and right with &lt;code>&amp;gt;&lt;/code> and &lt;code>&amp;lt;&lt;/code> like usual, but the cursor can also move up and down with &lt;code>^&lt;/code> and &lt;code>v&lt;/code>. Each cell is represented as an 8-bit number. An additional keyword &lt;code>l&lt;/code> followed by a number specifying the layer that the program operates over.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/embedding-lua-by-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/embedding-lua-by-example/</guid><description>&lt;h1 id="embedding-lua-in-c-by-example">Embedding Lua in C by Example&lt;/h1>
&lt;p>Here is a series of short C snippets to learn how to embed Lua in your C program. The complete source for these examples can be found at: &lt;a href="https://github.com/HParker/embedding-lua-in-c-by-example">https://github.com/HParker/embedding-lua-in-c-by-example&lt;/a>&lt;/p>
&lt;h1 id="run-a-string-of-lua-code">Run a string of Lua code&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lauxlib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lua.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lualib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// setup lua
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> lua_State &lt;span style="color:#666">*&lt;/span>L &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">luaL_newstate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_openlibs&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// Run a lua string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;print(&lt;/span>&lt;span style="color:#b62;font-weight:bold">\&amp;#34;&lt;/span>&lt;span style="color:#b44">hello from lua&lt;/span>&lt;span style="color:#b62;font-weight:bold">\&amp;#34;&lt;/span>&lt;span style="color:#b44">)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="run-a-file-of-lua-code">Run a file of Lua code&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lauxlib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lua.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lualib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// setup lua
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> lua_State &lt;span style="color:#666">*&lt;/span>L &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">luaL_newstate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_openlibs&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// run a lua file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#00a000">luaL_dofile&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;hello.lua&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="get-a-number-from-lua">Get a number from Lua&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;x = 10&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;x&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> x &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;x = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, x);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="get-a-string-from-lua">Get a string from Lua&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;string = &amp;#39;hi there&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;string&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">const&lt;/span> &lt;span style="color:#0b0;font-weight:bold">char&lt;/span> &lt;span style="color:#666">*&lt;/span> string &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">lua_tolstring&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#a2f">NULL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;string = &amp;#39;%s&amp;#39;&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, string);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="get-a-table-field-from-lua">Get a table field from Lua&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;table = { key = 123 }&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;table&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getfield&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#b44">&amp;#34;key&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> key &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;key = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, key);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="call-lua-function-from-c">Call Lua function from C&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;function foo() print(&lt;/span>&lt;span style="color:#b62;font-weight:bold">\&amp;#34;&lt;/span>&lt;span style="color:#b44">Hello from foo method&lt;/span>&lt;span style="color:#b62;font-weight:bold">\&amp;#34;&lt;/span>&lt;span style="color:#b44">) end&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;foo&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (&lt;span style="color:#00a000">lua_isfunction&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// V number of arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#080;font-style:italic">// | V number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> status &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">lua_pcall&lt;/span>(L, &lt;span style="color:#666">0&lt;/span>, &lt;span style="color:#666">0&lt;/span>, &lt;span style="color:#666">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// status can be LUA_OK, LUA_ERRRUN, LUA_ERRMEM, or LUA_ERRERR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (status &lt;span style="color:#666">!=&lt;/span> LUA_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;Something went wrong when calling the lua function&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a2f;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> result &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;result = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a2f;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;function `foo` was not found or was not a function&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="call-lua-function-with-a-return-value-from-c">Call lua function with a return value from C&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;function foo() return 456 end&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;foo&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (&lt;span style="color:#00a000">lua_isfunction&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// V number of arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#080;font-style:italic">// | V number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> status &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">lua_pcall&lt;/span>(L, &lt;span style="color:#666">0&lt;/span>, &lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#666">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// status can be LUA_OK, LUA_ERRRUN, LUA_ERRMEM, or LUA_ERRERR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (status &lt;span style="color:#666">!=&lt;/span> LUA_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;Something went wrong when calling the lua function&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a2f;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> result &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;result = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a2f;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;function `foo` was not found or was not a function&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="call-a-lua-function-with-arguements-from-c">Call a lua function with arguements from C&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;function square(x) return x * x end&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;square&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (&lt;span style="color:#00a000">lua_isfunction&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// V number of arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#080;font-style:italic">// | V number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#00a000">lua_pushnumber&lt;/span>(L, (lua_Number)&lt;span style="color:#666">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> status &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">lua_pcall&lt;/span>(L, &lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#666">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// status can be LUA_OK, LUA_ERRRUN, LUA_ERRMEM, or LUA_ERRERR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (status &lt;span style="color:#666">!=&lt;/span> LUA_OK) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;Something went wrong when calling the lua function&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;Error: %s &lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, &lt;span style="color:#00a000">lua_tostring&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_pop&lt;/span>(L, &lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a2f;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> doubled &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;doubled = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, doubled);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#a2f;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;function `square` was not found or was not a function&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="expose-a-c-function-to-lua">Expose a C function to Lua&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lauxlib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lua.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lualib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">basicCFunc&lt;/span>(lua_State &lt;span style="color:#666">*&lt;/span> L) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;This is my c function called from lua&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">0&lt;/span>; &lt;span style="color:#080;font-style:italic">// number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// setup lua
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> lua_State &lt;span style="color:#666">*&lt;/span>L &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">luaL_newstate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_openlibs&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_register&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;basicCFunc&amp;#34;&lt;/span>, basicCFunc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;basicCFunc()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="expose-a-c-function-to-lua-that-returns-a-value">Expose a C function to Lua that returns a value&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lauxlib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lua.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lualib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">returningCFunc&lt;/span>(lua_State &lt;span style="color:#666">*&lt;/span> L) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_pushnumber&lt;/span>(L, &lt;span style="color:#666">678&lt;/span>); &lt;span style="color:#080;font-style:italic">// result
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">1&lt;/span>; &lt;span style="color:#080;font-style:italic">// number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// setup lua
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> lua_State &lt;span style="color:#666">*&lt;/span>L &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">luaL_newstate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_openlibs&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// expose a function to lua that returns a value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#00a000">lua_register&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returningCFunc&amp;#34;&lt;/span>, returningCFunc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returnedFromC = returningCFunc()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returnedFromC&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> returnedFromC &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;returned from c = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, returnedFromC);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="expose-a-c-function-to-lua-that-takes-one-arguments">Expose a C function to Lua that takes one arguments&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lauxlib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lua.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lualib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">argumentCFunc&lt;/span>(lua_State &lt;span style="color:#666">*&lt;/span> L) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_pushnumber&lt;/span>(L, &lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">1&lt;/span>) &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>); &lt;span style="color:#080;font-style:italic">// result
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">1&lt;/span>; &lt;span style="color:#080;font-style:italic">// number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// setup lua
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> lua_State &lt;span style="color:#666">*&lt;/span>L &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">luaL_newstate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_openlibs&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_register&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;argumentCFunc&amp;#34;&lt;/span>, argumentCFunc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returnedFromC = argumentCFunc(1)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returnedFromC&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> returnedFromC &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;returned from c = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, returnedFromC);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="expose-a-c-function-to-lua-that-takes-any-number-of-arguments">Expose a C function to Lua that takes any number of arguments&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lauxlib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lua.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">#include&lt;/span> &lt;span style="color:#080">&amp;lt;lualib.h&amp;gt;&lt;/span>&lt;span style="color:#080">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">variableArgumentCFunc&lt;/span>(lua_State &lt;span style="color:#666">*&lt;/span> L) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> n &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">lua_gettop&lt;/span>(L); &lt;span style="color:#080;font-style:italic">// number of arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#0b0;font-weight:bold">float&lt;/span> sum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0b0;font-weight:bold">int&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">for&lt;/span> (i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">1&lt;/span>; i &lt;span style="color:#666">&amp;lt;=&lt;/span> n; i&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (&lt;span style="color:#666">!&lt;/span>&lt;span style="color:#00a000">lua_isnumber&lt;/span>(L, i)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_pushliteral&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;incorrect argument&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_error&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_pushnumber&lt;/span>(L, sum); &lt;span style="color:#080;font-style:italic">// result
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> &lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#666">1&lt;/span>; &lt;span style="color:#080;font-style:italic">// number of results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0b0;font-weight:bold">int&lt;/span> &lt;span style="color:#00a000">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-style:italic">// setup lua
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">&lt;/span> lua_State &lt;span style="color:#666">*&lt;/span>L &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#00a000">luaL_newstate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_openlibs&lt;/span>(L);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_register&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;variableArgumentCFunc&amp;#34;&lt;/span>, variableArgumentCFunc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">luaL_dostring&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returnedFromC = variableArgumentCFunc(1, 2, 3)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">lua_getglobal&lt;/span>(L, &lt;span style="color:#b44">&amp;#34;returnedFromC&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> returnedFromC &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#0b0;font-weight:bold">int&lt;/span>)&lt;span style="color:#00a000">lua_tonumber&lt;/span>(L, &lt;span style="color:#666">-&lt;/span>&lt;span style="color:#666">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a000">printf&lt;/span>(&lt;span style="color:#b44">&amp;#34;returned from c = %i&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#b44">&amp;#34;&lt;/span>, returnedFromC);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://www.hparker.xyz/emulators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/emulators/</guid><description>&lt;p>Emulators page&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/handmade-seattle-2022-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/handmade-seattle-2022-notes/</guid><description>&lt;h1 id="handmade-seattle-2022---notes">Handmade Seattle 2022 - notes&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/handmade-seattle-graph.jpg" alt="handmade seattle graph">&lt;/p>
&lt;p>&lt;a href="https://handmade-seattle.com/">Handmade Seattle&lt;/a> had an exceptionally high number of exceptional talks especially given the it is a small conference with only one track. I collected a few notes on some of my favorites, though I invite you to watch all of the talks.&lt;/p>
&lt;p>&lt;strong>Weathering Software Winter&lt;/strong> - &lt;a href="https://wiki.xxiivv.com/site/devine_lu_linvega.html">Devine&lt;/a> always has inspiring and visually stunning talks. Seeing more of the inspiration behind the &lt;a href="https://100r.co/site/uxn.html">Uxn virtual machine&lt;/a> inspires me to also pull inspiration from history. His ideas around e-waste, preservation and doing more with less are under appreciated areas to focus in an industry that wants to reinvent everything all the time.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/invoca-hackathon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/invoca-hackathon/</guid><description>&lt;h1 id="invoca-hackathon">Invoca Hackathon&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/TIS.png" alt="TIS">&lt;/p>
&lt;p>I participated in a hackathon at Invoca where we where give 2 days to build and present a project of our choosing. I won most technical project for my adaptation of a very simple RISC game written in Elm&lt;/p>
&lt;ul>
&lt;li>Invoca Post: &lt;a href="https://blog.invoca.com/developers-working-weekend-recap-invoca-hackathon/">https://blog.invoca.com/developers-working-weekend-recap-invoca-hackathon/&lt;/a> Update: This post seems to be gone and I can&amp;rsquo;t find it on the way back machine.&lt;/li>
&lt;li>Project: &lt;a href="https://github.com/HParker/TIS">https://github.com/HParker/TIS&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The project is a small assembly-like programing language that only
knows a few primitives. From this you are able to program a small
fictional &amp;ldquo;chip&amp;rdquo; to do simple tasks like increment or sum numbers
together. The programing concept is that inputs come from the left and
output to the right. You also have two registers one of which you can
write to directly and one that you can only swap your register
with. Given more time, I would consider adding additional puzzles and
adding additional instructions to make the game more
interesting. Right now I consider it a very, very simple RISC style
game that needs many more features to make it unique and valuable as a
game. As a hackathon project it was very successful and quite
interesting.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/orbtoberfest-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/orbtoberfest-2019/</guid><description>&lt;p>Orbtoberfest by CircleCI 2019&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/orbtober.png" alt="orbtober">&lt;/p>
&lt;p>CircleCI put on an event in Seattle to promote their open &lt;a href="https://circleci.com/orbs/registry/">Orb registry&lt;/a>. Orbs are their shared configuration format that allows you to write a CircleCI configuration for a job that anyone can use. This was possible before Orbs by sharing a bit of YAML that you could copy into your existing CircleCI config, but now you can reference the Orb by name and leave the rest up to the Orb. They call it &lt;a href="https://hacktoberfest.circleci.com">Orbtoberfest&lt;/a> which is kinda cute.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/pebble-rocks-hackathon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/pebble-rocks-hackathon/</guid><description>&lt;h1 id="pebble-rocks-hackathon">Pebble Rocks hackathon&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/pebble_rocks_photo.png" alt="Pebble Bike map">&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Aniu7OHChm8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;p>In 2015 I participated in the pebble rocks boulder hackathon. You can see a summary of my teams project here:
&lt;a href="https://www.hackster.io/teamturing/turnakit-706245">https://www.hackster.io/teamturing/turnakit-706245&lt;/a>&lt;/p>
&lt;p>We used the pebble watch to provide you turn by turn directions on the handlebars of your bike.&lt;/p>
&lt;ul>
&lt;li>Event Photos: &lt;a href="https://www.flickr.com/photos/23rdstudiosboulder/albums/72157657803685160">https://www.flickr.com/photos/23rdstudiosboulder/albums/72157657803685160&lt;/a>&lt;/li>
&lt;li>Event info: &lt;a href="https://www.viget.com/articles/pebble-rocks-boulder-hardware-innovation-packed-into-a-weekend-hackathon/">https://www.viget.com/articles/pebble-rocks-boulder-hardware-innovation-packed-into-a-weekend-hackathon/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>One of my favorite projects there was largely a huge 3d printing exercise making a HUGE print to attempt in one weekend, a very complicated musical charging station for the pebble watch:
&lt;a href="https://www.hackster.io/team-engineerable/timedock-speakeasy-67fcfa">https://www.hackster.io/team-engineerable/timedock-speakeasy-67fcfa&lt;/a>&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/projects/</guid><description>&lt;h2 id="projects">Projects&lt;/h2>
&lt;h3 id="ruby-explorerruby_explorer">&lt;a href="ruby_explorer">Ruby Explorer&lt;/a>&lt;/h3>
&lt;p>Explore how ruby parses your code and what instructions it generates easily in your browser&lt;/p>
&lt;h3 id="ruby-todoruby_todo">&lt;a href="ruby_todo">Ruby Todo&lt;/a>&lt;/h3>
&lt;p>Ruby.wasm todo list in your browser with editable code.&lt;/p>
&lt;h3 id="puzzle-enginepuzzle-engine">&lt;a href="puzzle-engine">Puzzle Engine&lt;/a>&lt;/h3>
&lt;p>An alterative implementation of the puzzlescript language interpreter and runtime using C and SDL. A large number of puzzles work, but not everything is supported properly.&lt;/p>
&lt;h3 id="bf3dbf3d">&lt;a href="bf3d">BF3D&lt;/a>&lt;/h3>
&lt;p>My Novel Esoteric programming language based on BrainFuck, but in 3d with beautiful 8-bit colors&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/puzzle-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/puzzle-engine/</guid><description>&lt;h1 id="puzzle-engine">puzzle engine&lt;/h1>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=-mBRJC_mFdI">Demo Video&lt;/a> | &lt;a href="https://github.com/hparker/puzzleengine">Code&lt;/a> | &lt;a href="htpps://www.puzzlescript.net">Inspiration&lt;/a>&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/-mBRJC_mFdI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;p>&lt;em>This video shows the PuzzleEngine test suite running through the tests with the optional renderer attached to show the puzzles being sovled at comically fast speeds.&lt;/em>&lt;/p>
&lt;p>PuzzleEngine is a PuzzleScript interpreter that allows you to run PuzzleScript games on your computer instead of in a web browser. You can find and play PuzzleScript games on &lt;a href="htpps://www.puzzlescript.net">puzzlescript.net&lt;/a>.&lt;/p>
&lt;h2 id="technical-details">Technical Details&lt;/h2>
&lt;p>The parser uses &lt;code>flex&lt;/code> and &lt;code>bison&lt;/code> to lex and parse the program. The program is then converted accessed when rendering with whichever renderer you choose. I included a &lt;code>SDL&lt;/code> based 2d renderer that is most feature complete as well as a quasi 3d renderer (using &lt;code>raylib&lt;/code>) and an ASCII renderer (using &lt;code>ncurses&lt;/code>).&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/ruby-bytecode-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/ruby-bytecode-patterns/</guid><description>&lt;h1 id="uncovering-ruby-bytecode-patterns">Uncovering Ruby Bytecode Patterns&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/cute-stack-machine.jpg" alt="Cute Stack Machine">&lt;/p>
&lt;p>Since Ruby 1.9, Ruby runs your code in a bytecode VM. That means that the ruby compiler converts your code to a series of bytecode instructions. For example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>ruby --dump=insns -e &amp;#39;5 * 10&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>== disasm: #&amp;lt;ISeq:&amp;lt;main&amp;gt;@-e:1 (1,0)-(1,6)&amp;gt; (catch: false)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0000 putobject 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0002 putobject 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0004 opt_mult &amp;lt;calldata!mid:*, argc:1, ARGS_SIMPLE&amp;gt;[CcCr]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0006 leave
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The bytecode instructions &lt;code>putobject&lt;/code> is called twice, &lt;code>opt_mult&lt;/code> is called next, then lastly &lt;code>leave&lt;/code>. These are the bytecode instructions that Ruby runs when executing &lt;code>5 * 10&lt;/code>. Ruby uses a stack based VM, so after &lt;code>putobject 5&lt;/code> is called, &lt;code>5&lt;/code> is on the stack to be used by other instructions.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/ruby-explorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/ruby-explorer/</guid><description>&lt;h1 id="ruby-explorer">Ruby Explorer&lt;/h1>
&lt;p>&lt;a href="https://github.com/HParker/ruby_explorer">GitHub&lt;/a> | &lt;a href="https://www.rubyexplorer.xyz/">Site&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/ruby_explorer.png" alt="Ruby Explorer Screenshot">&lt;/p>
&lt;p>Ruby Explorer makes it easy to explore and share Ruby VM internals. Typing Ruby code into Ruby Explorer generates a list of VM instructions created by ruby with links to their implementation in Ruby&amp;rsquo;s source code. In addition you can see what tokens the lexer returned and the S-Expression that ruby generated from those tokens.&lt;/p>
&lt;p>I became interested in making this tool while reading &lt;a href="https://nostarch.com/rum">Ruby Under A Microscope&lt;/a> by &lt;a href="http://patshaughnessy.net/">AUTHOR&lt;/a>. I could run &lt;code>ripper&lt;/code> to get the parse data or ruby &lt;code>ruby --dump=insns&lt;/code> and get the instructions, but having a tool that does all that &lt;strong>and&lt;/strong> links me the definition in ruby source seemed super worth having.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/ruby-regex-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/ruby-regex-engine/</guid><description>&lt;h1 id="regular-expressions-and-onigmo-the-ruby-regular-expression-engine">Regular Expressions and Onigmo, the Ruby regular expression engine&lt;/h1>
&lt;p>&lt;img src="https://www.hparker.xyz/regex-magic.jpg" alt="regex-magic">&lt;/p>
&lt;p>Regular expressions (regex), are powerful tools for finding and manipulating patterns in text. They are widely used in programming languages and text editors, though they are often treated as a black box. I always considered them one part programming and one part magic. The internet is full of articles about how regex are used, but very few diving deeply into their implementations. Today we will explore the theory behind regular expressions, including a brief tour of the most basic theory. We will also delve into the implementation of the Onigmo regular expression engine, which is used in the Ruby programming language.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/signal-state-run-identifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/signal-state-run-identifier/</guid><description>&lt;h1 id="signal-state-run-identifier">Signal State Run Identifier&lt;/h1>
&lt;p>&lt;a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2866953078">Steam Workshop Page&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://www.hparker.xyz/Run_Identifier2022.gif" alt="gif of a modular compuer synth solving a puzzle">&lt;/p>
&lt;p>My user created level on Signal state for identifying runs of numbers.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/speaking-about-performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/speaking-about-performance/</guid><description>&lt;h1 id="speaking-about-performance">Speaking about Performance&lt;/h1>
&lt;p>I get confused reading about performance differences. When someone says some software is &lt;strong>&amp;ldquo;twice as fast&amp;rdquo;&lt;/strong> I understand it can now do two tasks in the time it took to do one. However, There are very similar sounding phrases with vastly different meanings.&lt;/p>
&lt;p>Consider,&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>This system is 40% faster than the previous system&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>compared with,&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>This system is 40% the speed of the previous system&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>The first phrase is talking about a system that is slightly faster, the second is talking about a system that is significantly slower.&lt;/p></description></item><item><title/><link>https://www.hparker.xyz/your-disk-is-a-liability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.hparker.xyz/your-disk-is-a-liability/</guid><description>&lt;h1 id="your-web-server-filesystem-is-a-liability">Your web server filesystem is a liability&lt;/h1>
&lt;p>There seems to be a disconnect about how we should manage our
infrastructure. &amp;ldquo;Infrastructure as code&amp;rdquo; and &amp;ldquo;immutable
infrastructure&amp;rdquo; are common approaches now. The &amp;ldquo;pet servers&amp;rdquo;
anti-pattern seems well explained, but no critique of file system use
on a web server.&lt;/p>
&lt;p>The filesystem on your web servers is a liability and you should avoid
touching it at run time if at all possible. There are a number of ways
that it can go wrong. Maybe you deploy to hosts with hard disks or you
are referencing your Kubernetes cluster&amp;rsquo;s persistent volume, either
way persistent storage access should be treated with respect.&lt;/p></description></item></channel></rss>